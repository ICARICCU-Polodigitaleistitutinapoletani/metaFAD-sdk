<?php

class metafad_common_importer_operations_ICCD_SaveData extends metafad_common_importer_operations_LinkedToRunner
{
    protected $iccdProxy;
    protected $params;

    /**
     * Si aspetta:
     * metafad_common_importer_operations_TRCToStdClass constructor.
     * @param stdClass|null $params
     * @param metafad_common_importer_MainRunner $runnerRef
     */
    public function __construct($params, metafad_common_importer_MainRunner $runnerRef)
    {
        parent::__construct($params, $runnerRef);
        $this->params = $params;
        $this->iccdProxy = $this->getOrSetDefault("iccdProxy", pinax_ObjectFactory::createObject('metafad.gestioneDati.boards.models.proxy.ICCDProxy'));
    }

    /**
     * Riceve:
     * data = dati in formato finale (precedente al salvataggio)
     *
     * Output:
     * result = array associativo con i risultati del salvataggio
     * data = dati in formato finale (precedente al salvataggio)
     *
     * @param stdClass $input
     * @return stdClass
     * @throws Exception se il file non esiste
     */
    public function execute($input)
    {
        //TODO gli echo sono lasciati per debugging
        $data = $input->data;
        if(!$this->params->overwriteScheda && $data->TSK !== 'AUT' && $data->TSK !== 'BIB')
        {
            $toReturn = $this->getReturnData($data);
            if($toReturn)
            {
                echo 'Non reimporto ' . $data->uniqueIccdId . PHP_EOL;
                return $toReturn;
            }
        }
        else if(!$this->params->overwriteAuthority && ($data->TSK == 'AUT' || $data->TSK == 'BIB'))
        {
                $toReturn = $this->getReturnData($data);
                if ($toReturn) {
                    echo 'Non reimporto ' .$data->uniqueIccdId  . PHP_EOL;
                    return $toReturn;
                }
        }

        //Fix sovrascrittura dati
        if($this->params->overwriteScheda)
        {
            $scheda = pinax_ObjectFactory::createModelIterator($data->__model)
                        ->where('document_id',$data->__id)
                        ->first();
            if($scheda)
            {
                foreach($scheda->getRawData() as $k => $v)
                {
                    if(!$data->$k && strpos($k, 'document_') === false && $k != 'instituteKey')
                    {
                        $data->$k = null;
                    }
                }
            }
        }

        $result = $this->iccdProxy->save($data, true);
        return (object)array("result" => $result, "data" => $data);
    }
    public function validateInput($input)
    {
        // TODO: Change the autogenerated stub
    }

    public function getReturnData($data)
    {
        $record = pinax_ObjectFactory::createModelIterator($data->__model)
            ->where('uniqueIccdId', $data->uniqueIccdId)
            ->first();
        if ($record) {
            return (object)array("result" => array('set' => array('__id' => $record->document_id)), "data" => $data);
        }
        return null;
    }

}